# top-most EditorConfig file
root = true

# Unix-style newlines with a newline ending every file
[*]
indent_style = space
charset = utf-8
trim_trailing_whitespace = true

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# YML files
[*.yml]
indent_size = 2

# Code files
[*.{cs,vb}]
indent_size = 4
tab_width = 4
end_of_line = crlf
insert_final_newline = true

###############################
# Naming Conventions          #
# See https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/naming-rules
###############################

# Naming rules #

# Use PascalCase for interfaces, and prefix them with I
dotnet_naming_rule.interface_should_be_begins_with_i.severity = error
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

# Use PascalCase for types
dotnet_naming_rule.types_should_be_pascal_case.severity = error
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

# Use PascalCase for properties, methods, events and local functions
dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = error
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# Use PascalCase for constant fields  
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = error
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols  = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style = pascal_case

# Use camelCase for private fields, and prefix them with underscore
dotnet_naming_rule.private_fields_should_be_begins_with_underscore.severity = error
dotnet_naming_rule.private_fields_should_be_begins_with_underscore.symbols  = private_fields
dotnet_naming_rule.private_fields_should_be_begins_with_underscore.style = begins_with_underscore

# Use camelCase for private static fields, and prefix them with s_
dotnet_naming_rule.private_static_fields_should_be_begins_with_s_.severity = error
dotnet_naming_rule.private_static_fields_should_be_begins_with_s_.symbols  = private_static_fields
dotnet_naming_rule.private_static_fields_should_be_begins_with_s_.style = begins_with_s_

# Use camelCase for parameters
dotnet_naming_rule.parameters_should_be_camel_case.severity = error
dotnet_naming_rule.parameters_should_be_camel_case.symbols  = parameters
dotnet_naming_rule.parameters_should_be_camel_case.style = camel_case

# Use PascalCase for async methods, and suffix then with "Async"
dotnet_naming_rule.async_methods_should_be_ends_with_async.severity = error
dotnet_naming_rule.async_methods_should_be_ends_with_async.symbols  = async_methods
dotnet_naming_rule.async_methods_should_be_ends_with_async.style = ends_with_async

# Symbol specifications #

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers = 

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method, local_function
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected, local
dotnet_naming_symbols.non_field_members.required_modifiers = 

dotnet_naming_symbols.constant_fields.applicable_kinds = field
dotnet_naming_symbols.constant_fields.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.constant_fields.required_modifiers = const

dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_fields.required_modifiers =

dotnet_naming_symbols.private_static_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_static_fields.required_modifiers = static

dotnet_naming_symbols.parameters.applicable_kinds = parameter
dotnet_naming_symbols.parameters.applicable_accessibilities = *
dotnet_naming_symbols.parameters.required_modifiers =

dotnet_naming_symbols.async_methods.applicable_kinds = method
dotnet_naming_symbols.async_methods.applicable_accessibilities = *
dotnet_naming_symbols.async_methods.required_modifiers = async

# Naming styles #

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.camel_case.required_prefix = 
dotnet_naming_style.camel_case.required_suffix = 
dotnet_naming_style.camel_case.word_separator = 
dotnet_naming_style.camel_case.capitalization = camel_case

dotnet_naming_style.screaming_snake_case.required_prefix = 
dotnet_naming_style.screaming_snake_case.required_suffix = 
dotnet_naming_style.screaming_snake_case.word_separator = _
dotnet_naming_style.screaming_snake_case.capitalization = all_upper

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix = 
dotnet_naming_style.begins_with_i.word_separator = 
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.begins_with_underscore.required_prefix = _
dotnet_naming_style.begins_with_underscore.required_suffix =
dotnet_naming_style.begins_with_underscore.word_separator = 
dotnet_naming_style.begins_with_underscore.capitalization = camel_case

dotnet_naming_style.begins_with_s_.required_prefix = s_
dotnet_naming_style.begins_with_s_.required_suffix =
dotnet_naming_style.begins_with_s_.word_separator = 
dotnet_naming_style.begins_with_s_.capitalization = camel_case

dotnet_naming_style.ends_with_async.required_prefix = 
dotnet_naming_style.ends_with_async.required_suffix = Async
dotnet_naming_style.ends_with_async.word_separator = 
dotnet_naming_style.ends_with_async.capitalization = pascal_case

###############################
# .NET Coding Conventions     #
###############################
# Organize usings
dotnet_sort_system_directives_first = true
# Namespace convention
dotnet_style_namespace_match_folder = true:error
# Unused parameters
dotnet_code_quality_unused_parameters = all:error
# this. preferences
dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_property = false:error
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_event = false:error
# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_member_access = true:error
dotnet_style_predefined_type_for_locals_parameters_members = true:error
# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:error
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:error
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:error
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent
# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:error
dotnet_style_readonly_field = true:error
# Operators wrapping during a refactor
dotnet_style_operator_placement_when_wrapping = beginning_of_line
# Expression-level preferences
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:error
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:error
dotnet_style_prefer_auto_properties = true:error
dotnet_style_object_initializer = true:error
dotnet_style_collection_initializer = true:error
dotnet_style_prefer_collection_expression = true:error
dotnet_style_prefer_simplified_boolean_expressions = true:error
dotnet_style_prefer_conditional_expression_over_assignment = true:error
dotnet_style_explicit_tuple_names = true:error
dotnet_style_prefer_conditional_expression_over_return = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:error
dotnet_style_prefer_inferred_anonymous_type_member_names = true:error
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:error

###############################
# C# Coding Conventions       #
###############################
[*.cs]
# Using placement
csharp_using_directive_placement = outside_namespace:error
# Namespace style
csharp_style_namespace_declarations = file_scoped:error
# var preferences
csharp_style_var_for_built_in_types = false:silent
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:suggestion
# Expression-bodied members
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:error
csharp_style_expression_bodied_indexers = true:error
csharp_style_expression_bodied_accessors = true:error
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_local_functions = false:silent
# Pattern matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true:error
csharp_style_prefer_pattern_matching = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_prefer_extended_property_pattern = true:error
# Null-checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion
# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion
# Expression-level preferences
csharp_prefer_braces = true:suggestion
csharp_prefer_simple_using_statement = true:suggestion
csharp_style_prefer_method_group_conversion = true:suggestion
csharp_style_prefer_top_level_statements = true:suggestion
csharp_style_prefer_primary_constructors = true:suggestion
csharp_style_prefer_null_check_over_type_check = true:suggestion
csharp_prefer_simple_default_expression = true:error
csharp_style_prefer_local_over_anonymous_function = true:error
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:error
csharp_style_prefer_tuple_swap = true:error
csharp_style_prefer_utf8_string_literals = true:error
csharp_style_inlined_variable_declaration = true:error
csharp_style_unused_value_assignment_preference = discard_variable:error
csharp_style_unused_value_expression_statement_preference = discard_variable:silent
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_prefer_readonly_struct = true:suggestion
csharp_prefer_static_local_function = true:error
csharp_style_prefer_readonly_struct_member = true:suggestion
csharp_style_prefer_switch_expression = true:suggestion

###############################
# C# Formatting Rules         #
# See https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/csharp-formatting-options
###############################
# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true
# Indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = no_change
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = true
# Space preferences
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false
# Wrapping preferences
csharp_preserve_single_line_statements = true
csharp_preserve_single_line_blocks = true

###############################
# Code Quality Rules          #
###############################
# Severity for formatting rules
dotnet_diagnostic.IDE0055.severity = error

# CA1040: Avoid empty interfaces
# Not necessary when using marker interfaces.
dotnet_diagnostic.CA1040.severity = none

# CA1062: Validate arguments of public methods
# Not necessary when nullable reference type is enabled by default in projects
# and public methods are not called outside the solution.
# See https://github.com/dotnet/runtime/issues/63389
# Also see https://github.com/dotnet/roslyn-analyzers/issues/2875#issuecomment-536408486
dotnet_diagnostic.CA1062.severity = none

# CA1812: Avoid uninstantiated internal classes
# Not necessary when using Dependency Injection.
dotnet_diagnostic.CA1812.severity = none

# CA1716: Identifiers should not match keywords
dotnet_diagnostic.CA1716.severity = suggestion

# CA2007: Consider calling ConfigureAwait on the awaited task
# Not necessary in ASP.NET Core applications.
dotnet_diagnostic.CA2007.severity = none

# CA2225: Operator overloads have named alternates
# Not neccesary for private libraries.
dotnet_diagnostic.CA2225.severity = none

###############################
# Spell Checker               #
###############################
spelling_languages = es-NI,en-US
spelling_checkable_types = strings,identifiers,comments
spelling_error_severity = information
spelling_exclusion_path = .\exclusion.dic
spelling_use_default_exclusion_dictionary = true

###############################
# Sonar Rules                 #
###############################

# S125: Sections of code should not be commented out
dotnet_diagnostic.S125.severity = suggestion
